name: Tests

on:
  push:
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-benchmark:
    name: ${{ matrix.database }} - Test & Benchmark
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        database:
          - sqlite
          - postgresql
          - mysql
        include:
          - database: sqlite
            database_url: "sqlite::memory:"
            setup_commands: ""
            wait_commands: ""
            coverage: true
          - database: postgresql
            database_url: "postgres://postgres:password@localhost:5432/test_db"
            setup_commands: |
              sudo apt-get update
              sudo apt-get install -y postgresql-client
            wait_commands: |
              until pg_isready -h localhost -p 5432 -U postgres; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
            coverage: false
          - database: mysql
            database_url: "mysql://root:password@127.0.0.1:3306/test_db"
            setup_commands: |
              sudo apt-get update
              sudo apt-get install -y mysql-client
            wait_commands: |
              # Wait for MySQL to fully initialize (important!)
              echo "Waiting for MySQL to initialize..."
              sleep 20
              # Verify connection works
              mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "SELECT 1;" test_db
            coverage: false
    services:
      postgres:
        image: ${{ matrix.database == 'postgresql' && 'postgres:16' || null }}
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: ${{ matrix.database == 'postgresql' && '--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5' || null }}
        ports:
          - ${{ matrix.database == 'postgresql' && '5432:5432' || null }}
      mysql:
        image: ${{ matrix.database == 'mysql' && 'mysql:8.0' || null }}
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        options: ${{ matrix.database == 'mysql' && '--health-cmd="mysqladmin ping -h localhost -u root -ppassword --silent" --health-interval=10s --health-timeout=5s --health-retries=10' || null }}
        ports:
          - ${{ matrix.database == 'mysql' && '3306:3306' || null }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: ${{ matrix.coverage && 'llvm-tools-preview' || '' }}
    
    - name: Install cargo-llvm-cov (SQLite only)
      if: matrix.coverage
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Install database client
      if: matrix.setup_commands != ''
      run: ${{ matrix.setup_commands }}
    
    - name: Wait for database
      if: matrix.wait_commands != ''
      run: ${{ matrix.wait_commands }}
        
    - name: Run tests with coverage (SQLite only)
      if: matrix.coverage
      run: cargo llvm-cov --workspace --lcov --output-path lcov.info
      env:
        DATABASE_URL: ${{ matrix.database_url }}
        
    - name: Run tests (PostgreSQL/MySQL)
      if: '!matrix.coverage'
      run: cargo test --workspace -- --test-threads=1
      env:
        DATABASE_URL: ${{ matrix.database_url }}
        
    - name: Run benchmarks
      run: |
        echo "Running benchmarks on ${{ matrix.database }}..."
        cargo bench --bench crud_benchmarks --no-run
        # Run a quick benchmark compilation test to ensure benchmarks work
        timeout 60s cargo bench --bench crud_benchmarks -- --test || true
      env:
        DATABASE_URL: ${{ matrix.database_url }}
        BENCHMARK_DATABASE_URL: ${{ matrix.database_url }}
        
    - name: Upload coverage to Codecov (SQLite only)
      if: matrix.coverage
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        flags: unittests
        name: codecov-umbrella-${{ matrix.database }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

